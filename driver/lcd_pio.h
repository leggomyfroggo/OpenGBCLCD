// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //
 
#pragma once
 
#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif
 
#define LCD_WIDTH 160
#define LCD_HEIGHT 144
#define DCK_PIN 22
#define VSYNC_PIN 27
#define HSYNC_PIN 26
#define RED_PIN 0
#define HSYNC_START_IRQ 0
#define HSYNC_DONE_IRQ 1
 
// ------------- //
// vertical_loop //
// ------------- //
 
#define vertical_loop_wrap_target 0
#define vertical_loop_wrap 10
 
static const uint16_t vertical_loop_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block                      
    0xa027, //  1: mov    x, osr                     
    0xa041, //  2: mov    y, x                       
    0x209b, //  3: wait   1 gpio, 27                 
    0x201b, //  4: wait   0 gpio, 27                 
    0x209a, //  5: wait   1 gpio, 26     
    0x201a, //  6: wait   0 gpio, 26                 
    0xc020, //  7: irq    wait 0                     
    0x20c1, //  8: wait   1 irq, 1                   
    0x0085, //  9: jmp    y--, 5                     
    0x0002, // 10: jmp    2                          
            //     .wrap
};
 
#if !PICO_NO_HARDWARE
static const struct pio_program vertical_loop_program = {
    .instructions = vertical_loop_program_instructions,
    .length = 11,
    .origin = -1,
};
 
static inline pio_sm_config vertical_loop_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + vertical_loop_wrap_target, offset + vertical_loop_wrap);
    return c;
}
 
static inline void vertical_loop_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = vertical_loop_program_get_default_config(offset);
    // Configure the clocking pins for this PIO
    pio_gpio_init(pio, VSYNC_PIN);
    pio_gpio_init(pio, HSYNC_PIN);
    // Load our configuration
    pio_sm_init(pio, sm, offset, &c);
}
 
#endif
 
// --------------- //
// horizontal_loop //
// --------------- //
 
#define horizontal_loop_wrap_target 0
#define horizontal_loop_wrap 11
 
static const uint16_t horizontal_loop_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block                      
    0xe041, //  1: set    y, 1                       
    0xa027, //  2: mov    x, osr                     
    0xa0e1, //  3: mov    osr, x                     
    0x20c0, //  4: wait   1 irq, 0                   
    0x2096, //  5: wait   1 gpio, 22                 
    0x2016, //  6: wait   0 gpio, 22                 
    0xa042, //  7: nop                               
    0x008c, //  8: jmp    y--, 12                    
    0x4010, //  9: in     pins, 16                   
    0xe041, // 10: set    y, 1                       
    0x000e, // 11: jmp    14                         
    0x4010, // 12: in     pins, 16                   
    0x4010, // 13: in     pins, 16                   
    0x0045, // 14: jmp    x--, 5                     
    0xc021, // 15: irq    wait 1                     
    0x0002, // 16: jmp    2                          
            //     .wrap
};
 
#if !PICO_NO_HARDWARE
static const struct pio_program horizontal_loop_program = {
    .instructions = horizontal_loop_program_instructions,
    .length = 17,
    .origin = -1,
};
 
static inline pio_sm_config horizontal_loop_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + horizontal_loop_wrap_target, offset + horizontal_loop_wrap);
    return c;
}
 
static inline void horizontal_loop_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = horizontal_loop_program_get_default_config(offset);
    // Configure the data clocking pin for this PIO
    pio_gpio_init(pio, DCK_PIN);
    // Set the IN base pin to the provided `pin` parameter
    sm_config_set_in_pins(&c, pin);
    // Set the pin directions to input at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 15, false);
    // Connect these GPIOs to this PIO block
    for (int i = 0; i < 16; i++) {
        pio_gpio_init(pio, pin + i);
    }
    sm_config_set_in_shift(
        &c,
        false, // Shift-to-right = false (i.e. shift to left)
        true,  // Autopush enabled
        16      // Autopush threshold = 8
    );
    // Load our configuration
    pio_sm_init(pio, sm, offset, &c);
}
 
#endif